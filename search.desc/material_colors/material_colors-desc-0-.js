searchState.loadedDescShard("material_colors", 0, "Material colors\nARGB representation of color. Can be created using …\nComputes the L* value of a color in Argb representation.\nDelinearizes an Rgb component.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an L* value to an Argb representation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLinearizes an Rgb component.\nConverts a Y value to an L* value.\nConverts an L* value to a Y value.\nReturns a tone &lt;= <code>tone</code> that ensures <code>ratio</code>. Return value is …\nReturns a tone &lt;= <code>tone</code> that ensures <code>ratio</code>. Return value is …\nReturns a tone &gt;= <code>tone</code> that ensures <code>ratio</code>. Return value is …\nReturns a tone &gt;= <code>tone</code> that ensures <code>ratio</code>. Return value is …\nReturns a contrast ratio, which ranges from 1 to 21.\nIf <code>hct</code> is disliked, lighten it to make it likable.\nA color that adjusts itself based on UI state provided by …\nAdjusts a tone such that white has 4.5 contrast, if the …\nGiven a background tone, find a foreground tone, while …\nReturns the argument unchanged.\nReturn a Argb integer (i.e. a hex code).\nParameter scheme: Defines the conditions of the user …\nParameter scheme: Defines the conditions of the user …\nCalls <code>U::from(self)</code>.\nThe base constructor for <code>DynamicColor</code>.\nReturns whether <code>tone</code> can reach a contrast ratio of 4.5 …\nReturns whether <code>tone</code> prefers a light foreground.\nA class containing a value that changes with the contrast …\nReturns the argument unchanged.\nReturns the value at a given contrast level.\nCalls <code>U::from(self)</code>.\nConstructed by a set of values representing the current UI …\nValue from -1 to 1. -1 represents minimum contrast, 0 …\nGiven a tone, produces a reddish, colorful, color.\nReturns the argument unchanged.\nPanics\nCalls <code>U::from(self)</code>.\nWhether or not the scheme is in ‘dark mode’ or ‘…\nGiven a tone, produces a color. Hue and chroma of the …\nGiven a tone, produces a color. Hue and chroma of the …\nGiven a tone, produces a color. Hue and chroma of the …\nGiven a tone, produces a color. Hue and chroma of the …\nThe source color of the theme in HCT.\nGiven a tone, produces a color. Hue and chroma of the …\nThe variant, or style, of the theme.\nTokens, or named colors, in the Material Design system.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDocuments a constraint between two <code>DynamicColor</code>s, in which …\nDescribes the different in tone between colors. If there …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDocuments a constraint in tone distance between two …\nSet of themes supported by Dynamic Color. Instantiate the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError returned when RGB color parsing with the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n0 &lt;= <code>hue</code> &lt; 360; invalid values are corrected. 0 &lt;= <code>chroma</code> &lt;…\nReturns the argument unchanged.\n0 &lt;= <code>new_chroma</code> &lt;= ? After setting chroma, the color is …\nA number, in degrees, representing ex. red, orange, …\nLightness. Ranges from 0 to 100.\nTranslate a color into different <code>ViewingConditions</code>.\nCalls <code>U::from(self)</code>.\n0 &lt;= <code>new_chroma</code> &lt;= ? After setting chroma, the color is …\nA number, in degrees, representing ex. red, orange, …\nLightness. Ranges from 0 to 100.\nCAM16, a color appearance model. Colors are not just …\nCAM16-UCS a coordinate\nCAM16-UCS b coordinate\nInformally, colorfulness / color intensity. Like …\nCAM16 instances also have coordinates in the CAM16-UCS …\nReturns the argument unchanged.\nCreate a CAM16 color from lightness <code>j</code>, chroma <code>c</code>, and hue <code>h</code>,\nCreate a CAM16 color from lightness <code>j</code>, chroma <code>c</code>, and hue <code>h</code>,\nCreate a CAM16 color from CAM16-UCS coordinates <code>jstar</code>, …\nCreate a CAM16 color from CAM16-UCS coordinates <code>jstar</code>, …\nGiven color expressed in Xyz and viewed in …\nGiven <code>viewing_conditions</code>, convert <code>argb</code> to\nLike red, orange, yellow, green, etc.\nCalls <code>U::from(self)</code>.\nLightness\nCAM16-UCS J coordinate\nColorfulness\nBrightness; ratio of lightness to white point’s lightness\nSaturation; ratio of chroma to white point’s chroma\nArgb representation of a color, given the color was viewed …\nXyz representation of CAM16 seen in <code>viewing_conditions</code>.\nA struct that solves the HCT equation.\nFinds a color with the given Y and hue on the boundary of …\nFinds the segment containing the desired color.\nFinds a color with the given hue, chroma, and Y.\nReturns the argument unchanged.\nReturns the hue of <code>linrgb</code>, a linear Rgb color, in CAM16, in\nSolves the lerp equation.\nCalls <code>U::from(self)</code>.\nReturns the nth possible vertex of the polygonal …\nSanitizes a small enough angle in radians.\ni32ersects a segment with a plane.\nFinds an sRgb color with the given hue, chroma, and L*, if …\nFinds a CAM16 object with the given hue, chroma, and L*, if\nDelinearizes an Rgb component, returning a floating-point …\nIn traditional color spaces, a color can be identified …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvenience constructor for <code>ViewingConditions</code>.\nCubic Filter\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nGet the source color from an image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn intermediate concept between the key color for a UI …\nComprises foundational palettes to build a color scheme. …\nA convenience class for retrieving colors that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn intermediate concept between the key color for a UI …\nComprises foundational palettes to build a color scheme. …\nCreate a content <code>CorePalette</code> from a source Argb color.\nCreate a <code>CorePalette</code> from a source Argb color.\nCommonly-used tone values.\nKey color is a color that represents the hue and chroma of …\nA convenience class for retrieving colors that are …\nCache that maps tone to max chroma to avoid duplicated HCT …\nCreates a key color from a [<code>hue</code>] and a [<code>chroma</code>]. The key …\nReturns the argument unchanged.\nCreate a Tonal Palette from hue and chroma of <code>hct</code>.\nCreate a Tonal Palette from <code>hue</code> and <code>chroma</code>, which …\nCalls <code>U::from(self)</code>.\nCreate colors using <code>hue</code> and <code>chroma</code>.\nReturns the Argb representation of an HCT color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is similar to <code>MaterialLightColorSchemeFromPalette</code> and …\nGenerates a dark color scheme from a core palette. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a light color scheme from a core palette. This …\nA Dynamic Color theme that is intentionally detached from …\nA Dynamic Color theme that is intentionally detached from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHues used at breakpoints such that designers can specify a …\nHue rotations of the Secondary <code>TonalPalette</code>, corresponding …\nA Dynamic Color theme that is intentionally detached from …\nHue rotations of the Tertiary <code>TonalPalette</code>, corresponding …\nHues used at breakpoints such that designers can specify a …\nHue rotations of the Secondary <code>TonalPalette</code>, corresponding …\nA Dynamic Color theme that is intentionally detached from …\nHue rotations of the Tertiary <code>TonalPalette</code>, corresponding …\nGiven a large set of colors, remove colors that are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a map with keys of colors and values of how often …\nDesign utilities using color temperature theory.\nA set of colors with differing hues, equidistant in …\nPanics\nA color that complements the input color aesthetically.\nReturns the argument unchanged.\nHCTs for all hues, with the same chroma/tone as the input. …\nHCTs for all hues, with the same chroma/tone as the input. …\nRelative temperature of the input color. See …\nCalls <code>U::from(self)</code>.\nDetermines if an angle is between two other angles, …\nValue representing cool-warm factor of a color. Values …\nTemperature relative to all colors with the same chroma …\nA Map with keys of HCTs in <code>hcts_by_temp</code>, values of raw …\nPanics\nColor group\nCustom color used to pair with a theme\nCustom Color Group\nSets the custom colors, used as complementary tones.\nSets the error color of the theme.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the neutral color, used for background and surfaces.\nSets the neutral variant color, used for for medium …\nGenerate custom color group from source and target color\nSets the primary color of the theme.\nSets the secondary color of the theme.\nSets the tertiary color of the theme.\nSets the theme variant.\nCreates a theme builder with a custom source color.\nPartial LCG Algorithm implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")